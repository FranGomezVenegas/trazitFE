define(["exports","../base/foundation.js","./adapter.js","./constants.js"],function(_exports,_foundation,_adapter,_constants){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.default=void 0;_foundation=babelHelpers.interopRequireDefault(_foundation);_adapter=babelHelpers.interopRequireDefault(_adapter);/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ /* eslint-enable no-unused-vars */ /**
 * @extends {MDCFoundation<!MDCSwitchAdapter>}
 */class MDCSwitchFoundation extends _foundation.default{/** @return enum {string} */static get strings(){return _constants.strings}/** @return enum {string} */static get cssClasses(){return _constants.cssClasses}/** @return {!MDCSwitchAdapter} */static get defaultAdapter(){return(/** @type {!MDCSwitchAdapter} */{addClass:()=>/* className: string */{},removeClass:()=>/* className: string */{},setNativeControlChecked:()=>/* checked: boolean */{},setNativeControlDisabled:()=>/* disabled: boolean */{}})}constructor(adapter){super(Object.assign(MDCSwitchFoundation.defaultAdapter,adapter))}/** @param {boolean} checked */setChecked(checked){this.adapter_.setNativeControlChecked(checked);this.updateCheckedStyling_(checked)}/** @param {boolean} disabled */setDisabled(disabled){this.adapter_.setNativeControlDisabled(disabled);if(disabled){this.adapter_.addClass(_constants.cssClasses.DISABLED)}else{this.adapter_.removeClass(_constants.cssClasses.DISABLED)}}/**
   * Handles the change event for the switch native control.
   * @param {!Event} evt
   */handleChange(evt){this.updateCheckedStyling_(evt.target.checked)}/**
   * Updates the styling of the switch based on its checked state.
   * @param {boolean} checked
   * @private
   */updateCheckedStyling_(checked){if(checked){this.adapter_.addClass(_constants.cssClasses.CHECKED)}else{this.adapter_.removeClass(_constants.cssClasses.CHECKED)}}}var _default=MDCSwitchFoundation;_exports.default=_default});