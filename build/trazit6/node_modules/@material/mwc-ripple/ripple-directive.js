define(["exports","../../lit-html/lit-html.js","../ripple/foundation.js","./mwc-ripple-global-css.js","../ripple/util.js"],function(_exports,_litHtml,_foundation,_mwcRippleGlobalCss,util){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.ripple=_exports.rippleNode=void 0;_foundation=babelHelpers.interopRequireDefault(_foundation);util=babelHelpers.interopRequireWildcard(util);/**
@license
Copyright 2018 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/const MATCHES=util.getMatchesProperty(HTMLElement.prototype),supportsCssVariables=util.supportsCssVariables(window),isSafari=navigator.userAgent.match(/Safari/);let didApplyRippleStyle=!1;const applyRippleStyle=()=>{didApplyRippleStyle=!0;const part=new _litHtml.NodePart({templateFactory:_litHtml.templateFactory});part.appendInto(document.head);part.setValue(_mwcRippleGlobalCss.style);part.commit()},rippleNode=options=>{if(isSafari&&!didApplyRippleStyle){applyRippleStyle()}// TODO(sorvell): This directive requires bringing css yourself. We probably need to do this
// because of ShadyCSS, but on Safari, the keyframes styling must be global. Perhaps this
// directive could fix that.
const surfaceNode=options.surfaceNode,interactionNode=options.interactionNode||surfaceNode;// only style interaction node if not in the same root
if(interactionNode.getRootNode()!==surfaceNode.getRootNode()){if(""===interactionNode.style.position){interactionNode.style.position="relative"}}const adapter={browserSupportsCssVars:()=>supportsCssVariables,isUnbounded:()=>options.unbounded===void 0?!0:options.unbounded,isSurfaceActive:()=>interactionNode[MATCHES](":active"),isSurfaceDisabled:()=>!!options.disabled,addClass:className=>surfaceNode.classList.add(className),removeClass:className=>surfaceNode.classList.remove(className),containsEventTarget:target=>interactionNode.contains(target),registerInteractionHandler:(type,handler)=>interactionNode.addEventListener(type,handler,util.applyPassive()),deregisterInteractionHandler:(type,handler)=>interactionNode.removeEventListener(type,handler,util.applyPassive()),registerDocumentInteractionHandler:(evtType,handler)=>document.documentElement.addEventListener(evtType,handler,util.applyPassive()),deregisterDocumentInteractionHandler:(evtType,handler)=>document.documentElement.removeEventListener(evtType,handler,util.applyPassive()),registerResizeHandler:handler=>window.addEventListener("resize",handler),deregisterResizeHandler:handler=>window.removeEventListener("resize",handler),updateCssVariable:(varName,value)=>surfaceNode.style.setProperty(varName,value),computeBoundingRect:()=>interactionNode.getBoundingClientRect(),getWindowPageOffset:()=>({x:window.pageXOffset,y:window.pageYOffset})},rippleFoundation=new _foundation.default(adapter);rippleFoundation.init();return rippleFoundation};/**
 * Applied a ripple to the node specified by {surfaceNode}.
 * @param options {RippleNodeOptions}
 */_exports.rippleNode=rippleNode;const rippleInteractionNodes=new WeakMap,ripple=(0,_litHtml.directive)((options={})=>part=>{const surfaceNode=part.committer.element,interactionNode=options.interactionNode||surfaceNode;let rippleFoundation=part.value;// if the interaction node changes, destroy and invalidate the foundation.
const existingInteractionNode=rippleInteractionNodes.get(rippleFoundation);if(existingInteractionNode!==void 0&&existingInteractionNode!==interactionNode){rippleFoundation.destroy();rippleFoundation=_litHtml.noChange}// make the ripple, if needed
if(rippleFoundation===_litHtml.noChange){rippleFoundation=rippleNode(Object.assign({},options,{surfaceNode}));rippleInteractionNodes.set(rippleFoundation,interactionNode);part.setValue(rippleFoundation);// otherwise update settings as needed.
}else{if(options.unbounded!==void 0){rippleFoundation.setUnbounded(options.unbounded)}if(options.disabled!==void 0){rippleFoundation.setUnbounded(options.disabled)}}if(!0===options.active){rippleFoundation.activate()}else if(!1===options.active){rippleFoundation.deactivate()}});/**
 * A directive that applies a Material ripple to a part node. The directive
 * should be applied to a PropertyPart.
 * @param options {RippleOptions}
 */_exports.ripple=ripple});