import{DirHelper}from"./vaadin-dir-helper.js";/**
 * Array of Vaadin custom element classes that have been subscribed to the dir changes.
 */const directionSubscribers=[],directionUpdater=function(){const documentDir=getDocumentDir();directionSubscribers.forEach(element=>{alignDirs(element,documentDir)})};let scrollType;const directionObserver=new MutationObserver(directionUpdater);directionObserver.observe(document.documentElement,{attributes:!0,attributeFilter:["dir"]});const alignDirs=function(element,documentDir){if(documentDir){element.setAttribute("dir",documentDir)}else{element.removeAttribute("dir")}},getDocumentDir=function(){return document.documentElement.getAttribute("dir")};/**
 * @polymerMixin
 */export const DirMixin=superClass=>class VaadinDirMixin extends superClass{static get properties(){return{/**
       * @protected
       */dir:{type:String,readOnly:!0}}}/** @protected */static finalize(){super.finalize();if(!scrollType){scrollType=DirHelper.detectScrollType()}}/** @protected */connectedCallback(){super.connectedCallback();if(!this.hasAttribute("dir")){this.__subscribe();alignDirs(this,getDocumentDir())}}/** @protected */attributeChangedCallback(name,oldValue,newValue){super.attributeChangedCallback(name,oldValue,newValue);if("dir"!==name){return}// New value equals to the document direction and the element is not subscribed to the changes
const newValueEqlDocDir=newValue===getDocumentDir()&&-1===directionSubscribers.indexOf(this),newValueEmptied=!newValue&&oldValue&&-1===directionSubscribers.indexOf(this),newDiffValue=newValue!==getDocumentDir()&&oldValue===getDocumentDir();// Value was emptied and the element is not subscribed to the changes
if(newValueEqlDocDir||newValueEmptied){this.__subscribe();alignDirs(this,getDocumentDir())}else if(newDiffValue){this.__subscribe(!1)}}/** @protected */disconnectedCallback(){super.disconnectedCallback();this.__subscribe(!1);this.removeAttribute("dir")}/** @private */__subscribe(push=!0){if(push){-1===directionSubscribers.indexOf(this)&&directionSubscribers.push(this)}else{-1<directionSubscribers.indexOf(this)&&directionSubscribers.splice(directionSubscribers.indexOf(this),1)}}/**
   * @param {Element} element
   * @return {number}
   * @protected
   */__getNormalizedScrollLeft(element){return DirHelper.getNormalizedScrollLeft(scrollType,this.getAttribute("dir")||"ltr",element)}/**
   * @param {Element} element
   * @param {number} scrollLeft
   * @protected
   */__setNormalizedScrollLeft(element,scrollLeft){return DirHelper.setNormalizedScrollLeft(scrollType,this.getAttribute("dir")||"ltr",element,scrollLeft)}};