/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // tslint:disable:no-new-decorators
import{__decorate}from"../../tslib/tslib.es6.js";import MDCFormFieldFoundation from"../form-field/foundation.js";import{BaseElement}from"../mwc-base/base-element.js";import{FormElement}from"../mwc-base/form-element.js";import{observer}from"../mwc-base/observer.js";import{findAssignedElement}from"../mwc-base/utils.js";import{html,property,query}from"../../lit-element/lit-element.js";import{classMap}from"../../lit-html/directives/class-map.js";export class FormfieldBase extends BaseElement{constructor(){super(...arguments);this.alignEnd=!1;this.spaceBetween=!1;this.nowrap=!1;this.label="";this.mdcFoundationClass=MDCFormFieldFoundation}createAdapter(){return{registerInteractionHandler:(type,handler)=>{this.labelEl.addEventListener(type,handler)},deregisterInteractionHandler:(type,handler)=>{this.labelEl.removeEventListener(type,handler)},activateInputRipple:async()=>{const input=this.input;if(input instanceof FormElement){const ripple=await input.ripple;if(ripple){ripple.startPress()}}},deactivateInputRipple:async()=>{const input=this.input;if(input instanceof FormElement){const ripple=await input.ripple;if(ripple){ripple.endPress()}}}}}get input(){return findAssignedElement(this.slotEl,"*")}render(){const classes={"mdc-form-field--align-end":this.alignEnd,"mdc-form-field--space-between":this.spaceBetween,"mdc-form-field--nowrap":this.nowrap};return html`
      <div class="mdc-form-field ${classMap(classes)}">
        <slot></slot>
        <label class="mdc-label"
               @click="${this._labelClick}">${this.label}</label>
      </div>`}_labelClick(){const input=this.input;if(input){input.focus();input.click()}}}__decorate([property({type:Boolean})],FormfieldBase.prototype,"alignEnd",void 0);__decorate([property({type:Boolean})],FormfieldBase.prototype,"spaceBetween",void 0);__decorate([property({type:Boolean})],FormfieldBase.prototype,"nowrap",void 0);__decorate([property({type:String}),observer(async function(label){const input=this.input;if(input){if("input"===input.localName){input.setAttribute("aria-label",label)}else if(input instanceof FormElement){await input.updateComplete;input.setAriaLabel(label)}}})],FormfieldBase.prototype,"label",void 0);__decorate([query(".mdc-form-field")],FormfieldBase.prototype,"mdcRoot",void 0);__decorate([query("slot")],FormfieldBase.prototype,"slotEl",void 0);__decorate([query("label")],FormfieldBase.prototype,"labelEl",void 0);//# sourceMappingURL=mwc-formfield-base.js.map